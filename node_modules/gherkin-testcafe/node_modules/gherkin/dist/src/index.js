"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var stream_1 = require("stream");
var ParserMessageStream_1 = __importDefault(require("./stream/ParserMessageStream"));
var fs_1 = __importDefault(require("fs"));
var SourceMessageStream_1 = __importDefault(require("./stream/SourceMessageStream"));
var cucumber_messages_1 = require("cucumber-messages");
var gherkin_languages_json_1 = __importDefault(require("./gherkin-languages.json"));
var GherkinExe_1 = __importDefault(require("./external/GherkinExe"));
var IdGenerator_1 = require("./IdGenerator");
function fromStream(stream, options) {
    if (options === void 0) { options = {}; }
    return stream
        .pipe(new cucumber_messages_1.ProtobufMessageStream(cucumber_messages_1.messages.Envelope.decodeDelimited))
        .pipe(new ParserMessageStream_1.default(options));
}
exports.fromStream = fromStream;
function fromPaths(paths, options) {
    if (options === void 0) { options = {}; }
    options = types_1.gherkinOptions(options);
    if (process.env.GHERKIN_EXECUTABLE) {
        return new GherkinExe_1.default(process.env.GHERKIN_EXECUTABLE, paths, [], options).messageStream();
    }
    var combinedMessageStream = new stream_1.PassThrough({
        writableObjectMode: true,
        readableObjectMode: true,
    });
    function pipeSequentially() {
        var path = paths.shift();
        if (path !== undefined) {
            var parserMessageStream = new ParserMessageStream_1.default(options);
            parserMessageStream.on('end', function () {
                pipeSequentially();
            });
            var end = paths.length === 0;
            fs_1.default.createReadStream(path, { encoding: 'utf-8' })
                .pipe(new SourceMessageStream_1.default(path))
                .pipe(parserMessageStream)
                .pipe(combinedMessageStream, { end: end });
        }
    }
    pipeSequentially();
    return combinedMessageStream;
}
exports.fromPaths = fromPaths;
function fromSources(envelopes, options) {
    if (options === void 0) { options = {}; }
    options = types_1.gherkinOptions(options);
    if (process.env.GHERKIN_EXECUTABLE) {
        return new GherkinExe_1.default(process.env.GHERKIN_EXECUTABLE, [], envelopes, options).messageStream();
    }
    var combinedMessageStream = new stream_1.PassThrough({ objectMode: true });
    function pipeSequentially() {
        var envelope = envelopes.shift();
        if (envelope !== undefined && envelope.source) {
            var parserMessageStream = new ParserMessageStream_1.default(options);
            parserMessageStream.pipe(combinedMessageStream, { end: envelopes.length === 0 });
            parserMessageStream.on('end', pipeSequentially);
            parserMessageStream.end(envelope);
        }
    }
    pipeSequentially();
    return combinedMessageStream;
}
exports.fromSources = fromSources;
function dialects() {
    return gherkin_languages_json_1.default;
}
exports.dialects = dialects;
exports.default = {
    fromStream: fromStream,
    fromPaths: fromPaths,
    fromSources: fromSources,
    dialects: dialects,
    uuid: IdGenerator_1.uuid,
    incrementing: IdGenerator_1.incrementing,
};
//# sourceMappingURL=index.js.map