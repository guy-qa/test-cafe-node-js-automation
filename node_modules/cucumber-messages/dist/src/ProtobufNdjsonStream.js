"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var stream_1 = require("stream");
var ProtobufNdjsonStream = /** @class */ (function (_super) {
    __extends(ProtobufNdjsonStream, _super);
    function ProtobufNdjsonStream() {
        return _super.call(this, {
            writableObjectMode: true,
            readableObjectMode: true,
        }) || this;
    }
    ProtobufNdjsonStream.prototype._transform = function (message, encoding, callback) {
        // @ts-ignore
        if (!message.constructor.toObject) {
            return callback(new Error("Not a protobuf object: " + JSON.stringify(message)));
        }
        // @ts-ignore
        var ob = message.constructor.toObject(message, { defaults: true });
        // This reviver omits printing fields with empty values
        // This is to make it behave the same as Golang's protobuf->JSON converter
        var json = JSON.stringify(ob, function (key, value) {
            return value === null ||
                value === '' ||
                value === 0 ||
                (Array.isArray(value) && value.length === 0)
                ? undefined
                : fixEnum(key, value);
        });
        this.push(json + '\n');
        callback();
    };
    return ProtobufNdjsonStream;
}(stream_1.Transform));
exports.default = ProtobufNdjsonStream;
// Enum values are incorrectly represented in JSON as the enum value index,
// rather than the enum value string. This function works around that.
function fixEnum(key, value) {
    if (key === 'encoding') {
        return ['BASE64', 'UTF8'][value];
    }
    return value;
}
//# sourceMappingURL=ProtobufNdjsonStream.js.map