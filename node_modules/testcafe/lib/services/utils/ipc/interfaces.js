"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_list_1 = __importDefault(require("../../../errors/error-list"));
/* eslint-disable @typescript-eslint/interface-name-prefix */
var IPCPacketType;
(function (IPCPacketType) {
    IPCPacketType[IPCPacketType["request"] = 0] = "request";
    IPCPacketType[IPCPacketType["response"] = 1] = "response";
})(IPCPacketType = exports.IPCPacketType || (exports.IPCPacketType = {}));
var IPCTransportEvents;
(function (IPCTransportEvents) {
    IPCTransportEvents["data"] = "data";
})(IPCTransportEvents = exports.IPCTransportEvents || (exports.IPCTransportEvents = {}));
/* eslint-enable @typescript-eslint/interface-name-prefix */
function isTestCafeErrorList(err) {
    return err.name === error_list_1.default.name;
}
exports.isTestCafeErrorList = isTestCafeErrorList;
function isIPCErrorResponse(response) {
    return !!response.error;
}
exports.isIPCErrorResponse = isIPCErrorResponse;
function isIPCResponsePacket(message) {
    return ['id', 'type', 'sync', 'data'].every(prop => prop in message);
}
exports.isIPCResponsePacket = isIPCResponsePacket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy91dGlscy9pcGMvaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLDRFQUEyRDtBQUszRCw2REFBNkQ7QUFDN0QsSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3JCLHVEQUFPLENBQUE7SUFDUCx5REFBUSxDQUFBO0FBQ1osQ0FBQyxFQUhXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBR3hCO0FBZ0NELElBQVksa0JBRVg7QUFGRCxXQUFZLGtCQUFrQjtJQUMxQixtQ0FBYSxDQUFBO0FBQ2pCLENBQUMsRUFGVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQUU3QjtBQVdELDREQUE0RDtBQUc1RCxTQUFnQixtQkFBbUIsQ0FBRSxHQUFrQjtJQUNuRCxPQUFRLEdBQXlCLENBQUMsSUFBSSxLQUFLLG9CQUFpQixDQUFDLElBQUksQ0FBQztBQUN0RSxDQUFDO0FBRkQsa0RBRUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBRSxRQUFrRDtJQUNsRixPQUFPLENBQUMsQ0FBRSxRQUE2QixDQUFDLEtBQUssQ0FBQztBQUNsRCxDQUFDO0FBRkQsZ0RBRUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBRSxPQUFlO0lBQ2hELE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUM7QUFDekUsQ0FBQztBQUZELGtEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW5zdWJzY3JpYmVGbiB9IGZyb20gJ2VtaXR0ZXJ5JztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vdXRpbHMvYXN5bmMtZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgVGVzdENhZmVFcnJvckxpc3QgZnJvbSAnLi4vLi4vLi4vZXJyb3JzL2Vycm9yLWxpc3QnO1xuXG5cbmV4cG9ydCB0eXBlIEV4dGVybmFsRXJyb3IgPSBFcnJvciB8IFRlc3RDYWZlRXJyb3JMaXN0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvaW50ZXJmYWNlLW5hbWUtcHJlZml4ICovXG5leHBvcnQgZW51bSBJUENQYWNrZXRUeXBlIHtcbiAgICByZXF1ZXN0LFxuICAgIHJlc3BvbnNlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBDUGFja2V0IHtcbiAgICBpZDogbnVtYmVyO1xuICAgIHR5cGU6IElQQ1BhY2tldFR5cGU7XG4gICAgc3luYzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUENSZXF1ZXN0RGF0YSB7XG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhcmdzOiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUENSZXF1ZXN0UGFja2V0IGV4dGVuZHMgSVBDUGFja2V0IHtcbiAgICBkYXRhOiBJUENSZXF1ZXN0RGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUENTdWNjZXNzZnVsUmVzcG9uc2Uge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcmVzdWx0OiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBDRXJyb3JSZXNwb25zZSB7XG4gICAgZXJyb3I6IEV4dGVybmFsRXJyb3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBDUmVzcG9uc2VQYWNrZXQgZXh0ZW5kcyBJUENQYWNrZXQge1xuICAgIGRhdGE6IElQQ1N1Y2Nlc3NmdWxSZXNwb25zZSB8IElQQ0Vycm9yUmVzcG9uc2U7XG59XG5cbmV4cG9ydCBlbnVtIElQQ1RyYW5zcG9ydEV2ZW50cyB7XG4gICAgZGF0YSA9ICdkYXRhJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQQ1RyYW5zcG9ydCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgb24oZXZlbnQ6IElQQ1RyYW5zcG9ydEV2ZW50cy5kYXRhLCBoYW5kbGVyOiAoZGF0YTogSVBDUGFja2V0KSA9PiBQcm9taXNlPHZvaWQ+KTogVW5zdWJzY3JpYmVGbjtcblxuICAgIHJlYWQoKTogdm9pZDtcbiAgICB3cml0ZShwYWNrZXQ6IElQQ1BhY2tldCk6IFByb21pc2U8dm9pZD47XG5cbiAgICByZWFkU3luYygpOiBJUENSZXNwb25zZVBhY2tldDtcbiAgICB3cml0ZVN5bmMocGFja2V0OiBJUENQYWNrZXQpOiB2b2lkO1xufVxuLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvaW50ZXJmYWNlLW5hbWUtcHJlZml4ICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVzdENhZmVFcnJvckxpc3QgKGVycjogRXh0ZXJuYWxFcnJvcik6IGVyciBpcyBUZXN0Q2FmZUVycm9yTGlzdCB7XG4gICAgcmV0dXJuIChlcnIgYXMgVGVzdENhZmVFcnJvckxpc3QpLm5hbWUgPT09IFRlc3RDYWZlRXJyb3JMaXN0Lm5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lQQ0Vycm9yUmVzcG9uc2UgKHJlc3BvbnNlOiBJUENTdWNjZXNzZnVsUmVzcG9uc2UgfCBJUENFcnJvclJlc3BvbnNlKTogcmVzcG9uc2UgaXMgSVBDRXJyb3JSZXNwb25zZSB7XG4gICAgcmV0dXJuICEhKHJlc3BvbnNlIGFzIElQQ0Vycm9yUmVzcG9uc2UpLmVycm9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJUENSZXNwb25zZVBhY2tldCAobWVzc2FnZTogb2JqZWN0KTogbWVzc2FnZSBpcyBJUENSZXNwb25zZVBhY2tldCB7XG4gICAgcmV0dXJuIFsnaWQnLCAndHlwZScsICdzeW5jJywgJ2RhdGEnXS5ldmVyeShwcm9wID0+IHByb3AgaW4gbWVzc2FnZSk7XG59XG4iXX0=