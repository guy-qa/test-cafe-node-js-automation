"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const protocol_1 = require("./protocol");
const unitTypes = __importStar(require("../../api/structure/unit-types"));
const RECURSIVE_PROPERTIES = ['testFile', 'fixture', 'currentFixture', 'collectedTests'];
function isProperty(object, property) {
    return object.hasOwnProperty(property);
}
function isTest(value) {
    return value.unitTypeName === unitTypes.TEST;
}
exports.isTest = isTest;
function isFixture(value) {
    return value.unitTypeName === unitTypes.FIXTURE;
}
exports.isFixture = isFixture;
function mapProperties(object, properties, mapper) {
    for (const property of properties) {
        if (!isProperty(object, property))
            continue;
        const value = object[property];
        if (Array.isArray(value))
            object[property] = value.map(item => mapper({ item, property, object }));
        else
            object[property] = mapper({ item: object[property], property, object });
    }
}
function replaceTestFunctions(unit) {
    mapProperties(unit, protocol_1.TEST_FUNCTION_PROPERTIES, ({ item }) => !!item);
}
function restoreTestFunctions(unit, mapper) {
    mapProperties(unit, protocol_1.TEST_FUNCTION_PROPERTIES, ({ item, object, property }) => item ? mapper(object.id, property) : item);
}
function flattenRecursiveProperties(unit) {
    mapProperties(unit, RECURSIVE_PROPERTIES, ({ item }) => item.id);
}
function restoreRecursiveProperties(unit, units) {
    mapProperties(unit, RECURSIVE_PROPERTIES, ({ item }) => units[item]);
}
function flatten(tests) {
    const testFiles = lodash_1.uniq(tests.map(test => test.testFile));
    const fixtures = lodash_1.uniq(tests.map(test => test.fixture));
    return lodash_1.keyBy([...tests, ...fixtures, ...testFiles], unit => unit.id);
}
exports.flatten = flatten;
function serialize(units) {
    const result = {};
    for (const unit of Object.values(units)) {
        const copy = Object.assign({}, unit);
        replaceTestFunctions(copy);
        flattenRecursiveProperties(copy);
        result[copy.id] = copy;
    }
    return result;
}
exports.serialize = serialize;
function restore(units, mapper) {
    const list = Object.values(units);
    const result = [];
    for (const unit of list) {
        restoreRecursiveProperties(unit, units);
        restoreTestFunctions(unit, mapper);
    }
    for (const unit of list) {
        if (isTest(unit))
            result.push(unit);
    }
    return result;
}
exports.restore = restore;
//# sourceMappingURL=data:application/json;base64,