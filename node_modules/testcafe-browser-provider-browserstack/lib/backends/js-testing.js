"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jimp_1 = __importDefault(require("jimp"));
const base_1 = __importDefault(require("./base"));
const request_api_1 = __importDefault(require("../utils/request-api"));
const create_browserstack_status_1 = __importDefault(require("../utils/create-browserstack-status"));
const TESTS_TIMEOUT = process.env['BROWSERSTACK_TEST_TIMEOUT'] || 1800;
const BROWSERSTACK_API_PATHS = {
    browserList: {
        url: 'https://api.browserstack.com/4/browsers?flat=true'
    },
    newWorker: {
        url: 'https://api.browserstack.com/4/worker',
        method: 'POST'
    },
    getWorkerInfo: id => ({
        url: `https://api.browserstack.com/4/worker/${id}`
    }),
    deleteWorker: id => ({
        url: `https://api.browserstack.com/4/worker/${id}`,
        method: 'DELETE'
    }),
    screenshot: id => ({
        url: `https://api.browserstack.com/4/worker/${id}/screenshot.png`,
        encoding: null
    }),
    setStatus: id => ({
        url: `https://api.browserstack.com/automate/sessions/${id}.json`,
        method: 'PUT'
    })
};
class JSTestingBackend extends base_1.default {
    constructor(...args) {
        super(...args);
        this.workers = {};
    }
    async _requestSessionUrl(id) {
        var workerInfo = await request_api_1.default(BROWSERSTACK_API_PATHS.getWorkerInfo(this.workers[id].id));
        return workerInfo['browser_url'];
    }
    async _getSessionId(id) {
        var sessionIdMatch = this.workers[id].sessionUrl.match(/[^/]*$/);
        return sessionIdMatch && sessionIdMatch[0];
    }
    async getBrowsersList() {
        var platformsInfo = await request_api_1.default(BROWSERSTACK_API_PATHS.browserList);
        return platformsInfo.reverse();
    }
    getSessionUrl(id) {
        return this.workers[id] ? this.workers[id].sessionUrl : '';
    }
    async openBrowser(id, pageUrl, capabilities) {
        var { local } = capabilities, restCapabilities = __rest(capabilities, ["local"]);
        capabilities = Object.assign({ 'browserstack.local': local, timeout: TESTS_TIMEOUT, url: pageUrl }, restCapabilities);
        this.workers[id] = await request_api_1.default(BROWSERSTACK_API_PATHS.newWorker, Object.assign({ executeImmediately: true }, capabilities));
        this.workers[id].started = Date.now();
        this.workers[id].sessionUrl = await this._requestSessionUrl(id);
        this.workers[id].sessionId = await this._getSessionId(id);
    }
    async closeBrowser(id) {
        var workerId = this.workers[id].id;
        // Return incase of invalid workerId
        if (!workerId || workerId === '')
            return;
        await request_api_1.default(BROWSERSTACK_API_PATHS.deleteWorker(workerId));
    }
    async takeScreenshot(id, screenshotPath) {
        var buffer = await request_api_1.default(BROWSERSTACK_API_PATHS.screenshot(this.workers[id].id));
        var image = await jimp_1.default.read(buffer);
        await image.writeAsync(screenshotPath);
    }
    async resizeWindow(id) {
        this.reportWarning(id, 'The window resize functionality is not supported by the Browserstack JS Testing API. Use the Browserstack Automate API.');
    }
    async maximizeWindow(id) {
        this.reportWarning(id, 'The window maximization functionality is not supported by the Browserstack JS Testing API. Use the Browserstack Automate API.');
    }
    async reportJobResult(id, jobResult, jobData, possibleResults) {
        var sessionId = this.workers[id].sessionId;
        var jobStatus = create_browserstack_status_1.default(jobResult, jobData, possibleResults);
        await request_api_1.default(BROWSERSTACK_API_PATHS.setStatus(sessionId), { body: jobStatus });
    }
}
exports.default = JSTestingBackend;
//# sourceMappingURL=data:application/json;base64,