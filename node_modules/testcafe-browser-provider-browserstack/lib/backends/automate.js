"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const jimp_1 = __importDefault(require("jimp"));
const base_1 = __importDefault(require("./base"));
const request_api_1 = __importDefault(require("../utils/request-api"));
const create_browserstack_status_1 = __importDefault(require("../utils/create-browserstack-status"));
const get_api_polling_interval_1 = __importDefault(require("../utils/get-api-polling-interval"));
const ERROR_MESSAGES = __importStar(require("../templates/error-messages"));
const API_POLLING_INTERVAL = get_api_polling_interval_1.default();
const BROWSERSTACK_API_PATHS = {
    browserList: {
        url: 'https://api.browserstack.com/automate/browsers.json'
    },
    newSession: {
        url: 'https://hub-cloud.browserstack.com/wd/hub/session',
        method: 'POST'
    },
    openUrl: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}/url`,
        method: 'POST'
    }),
    getWindowSize: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}/window/current/size`
    }),
    setWindowSize: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}/window/current/size`,
        method: 'POST'
    }),
    maximizeWindow: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}/window/current/maximize`,
        method: 'POST'
    }),
    getUrl: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}/url`
    }),
    deleteSession: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}`,
        method: 'DELETE'
    }),
    screenshot: id => ({
        url: `https://hub-cloud.browserstack.com/wd/hub/session/${id}/screenshot`
    }),
    getStatus: id => ({
        url: `https://api.browserstack.com/automate/sessions/${id}.json`
    }),
    setStatus: id => ({
        url: `https://api.browserstack.com/automate/sessions/${id}.json`,
        method: 'PUT'
    })
};
function requestApi(path, params) {
    return request_api_1.default(path, params)
        .then(response => {
        if (response.status) {
            throw new Error(ERROR_MESSAGES.REMOTE_API_REQUEST_FAILED({
                status: response.status,
                apiResponse: response.value && response.value.message || util_1.inspect(response)
            }));
        }
        return response;
    });
}
function getCorrectedSize(currentClientAreaSize, currentWindowSize, requestedSize) {
    var horizontalChrome = currentWindowSize.width - currentClientAreaSize.width;
    var verticalChrome = currentWindowSize.height - currentClientAreaSize.height;
    return {
        width: requestedSize.width + horizontalChrome,
        height: requestedSize.height + verticalChrome
    };
}
class AutomateBackend extends base_1.default {
    constructor(...args) {
        super(...args);
        this.sessions = {};
    }
    static _ensureSessionId(sessionInfo) {
        const sessionData = sessionInfo.value || {};
        const sessionCapabilities = sessionData.capabilities || {};
        sessionInfo.sessionId = sessionInfo.sessionId ||
            sessionData.sessionId ||
            sessionData['webdriver.remote.sessionid'] ||
            sessionCapabilities['webdriver.remote.sessionid'];
        if (!sessionInfo.sessionId) {
            throw new Error(ERROR_MESSAGES.SESSION_ID_NOT_FOUND({
                sessionInfoDump: util_1.inspect(sessionInfo)
            }));
        }
    }
    async _requestSessionUrl(id) {
        var sessionInfo = await request_api_1.default(BROWSERSTACK_API_PATHS.getStatus(this.sessions[id].sessionId));
        return sessionInfo['automation_session']['browser_url'];
    }
    async _requestCurrentWindowSize(id) {
        var currentWindowSizeData = await requestApi(BROWSERSTACK_API_PATHS.getWindowSize(this.sessions[id].sessionId));
        return {
            width: currentWindowSizeData.value.width,
            height: currentWindowSizeData.value.height
        };
    }
    async getBrowsersList() {
        var platformsInfo = await request_api_1.default(BROWSERSTACK_API_PATHS.browserList);
        return platformsInfo.reverse();
    }
    getSessionUrl(id) {
        return this.sessions[id] ? this.sessions[id].sessionUrl : '';
    }
    async openBrowser(id, pageUrl, capabilities) {
        var { localIdentifier, local } = capabilities, restCapabilities = __rest(capabilities, ["localIdentifier", "local"]);
        capabilities = Object.assign({ 'browserstack.localIdentifier': localIdentifier, 'browserstack.local': local }, restCapabilities);
        this.sessions[id] = await requestApi(BROWSERSTACK_API_PATHS.newSession, {
            body: { desiredCapabilities: capabilities },
            executeImmediately: true
        });
        AutomateBackend._ensureSessionId(this.sessions[id]);
        this.sessions[id].sessionUrl = await this._requestSessionUrl(id);
        var sessionId = this.sessions[id].sessionId;
        this.sessions[id].interval = setInterval(() => requestApi(BROWSERSTACK_API_PATHS.getUrl(sessionId), { executeImmediately: true }), API_POLLING_INTERVAL);
        await requestApi(BROWSERSTACK_API_PATHS.openUrl(sessionId), { body: { url: pageUrl } });
    }
    async closeBrowser(id) {
        const session = this.sessions[id];
        if (!session)
            return;
        clearInterval(session.interval);
        delete this.sessions[id];
        // Delete session whose sessionId is created
        if (session.sessionId && session.sessionId !== '')
            await requestApi(BROWSERSTACK_API_PATHS.deleteSession(session.sessionId));
    }
    async takeScreenshot(id, screenshotPath) {
        var base64Data = await requestApi(BROWSERSTACK_API_PATHS.screenshot(this.sessions[id].sessionId));
        var buffer = Buffer.from(base64Data.value, 'base64');
        const image = await jimp_1.default.read(buffer);
        await image.write(screenshotPath);
    }
    async resizeWindow(id, width, height, currentWidth, currentHeight) {
        var sessionId = this.sessions[id].sessionId;
        var currentWindowSize = await this._requestCurrentWindowSize(id);
        var currentClientAreaSize = { width: currentWidth, height: currentHeight };
        var requestedSize = { width, height };
        var correctedSize = getCorrectedSize(currentClientAreaSize, currentWindowSize, requestedSize);
        await requestApi(BROWSERSTACK_API_PATHS.setWindowSize(sessionId), { body: correctedSize });
    }
    async maximizeWindow(id) {
        await requestApi(BROWSERSTACK_API_PATHS.maximizeWindow(this.sessions[id].sessionId));
    }
    async reportJobResult(id, jobResult, jobData, possibleResults) {
        var sessionId = this.sessions[id].sessionId;
        var jobStatus = create_browserstack_status_1.default(jobResult, jobData, possibleResults);
        await request_api_1.default(BROWSERSTACK_API_PATHS.setStatus(sessionId), { body: jobStatus });
    }
}
exports.default = AutomateBackend;
//# sourceMappingURL=data:application/json;base64,